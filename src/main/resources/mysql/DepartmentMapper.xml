<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smile.skype.learnmybatis.dao.DepartmentMapper">

    <resultMap id="BaseResultMap" type="com.smile.skype.learnmybatis.bean.Department" >
        <id column="id" property="id"/>
        <result column="dept_name" property="departmentName"/>
    </resultMap>

    <!-- 引用缓存：namespace：指定和哪个名称空间下的缓存一样 -->
    <cache-ref namespace="com.smile.skype.learnmybatis.dao.EmployeeMapper"/>
    <!-- 根据id查询部门信息 -->
    <select id="getDeptById" resultType="com.smile.skype.learnmybatis.bean.Department">
        select id,dept_name departmentName from tbl_dept where id=#{id}
    </select>

    <!--嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则  -->
    <resultMap id="MyDepartMent" type="com.smile.skype.learnmybatis.bean.Department" extends="BaseResultMap">

        <collection property="emps" ofType="com.smile.skype.learnmybatis.bean.Employee">
            <id column="eid" property="id"/>
            <result column="last_name" property="lastName"/>
            <result column="email" property="email" />
            <result column="gender" property="gender" />
        </collection>
    </resultMap>
    <!-- 查询部门时将部门下面的员工查询出来 -->
    <select id="getDeptByIdPlus" resultMap="MyDepartMent">
        SELECT d.id id,d.dept_name dept_name,
				e.id eid,e.last_name last_name,e.email email,e.gender gender
		FROM tbl_dept d
		LEFT JOIN tbl_employee e
		ON d.id=e.d_id
		WHERE d.id=#{id}
    </select>


    <resultMap id="MyDeptStep" type="com.smile.skype.learnmybatis.bean.Department" extends="BaseResultMap">
        <collection property="emps"
                    select="com.smile.skype.learnmybatis.dao.EmployeeMapperPlus.getEmpByDeptId"
                    column="{deptId=id}">

        </collection>
    </resultMap>
    <!-- 分步查询 -->
    <select id="getDeptByIdStep" resultMap="MyDeptStep">
        select id,dept_name from tbl_dept where id = #{id}
    </select>
    <!-- 扩展：多列的值传递过去：
			将多列的值封装map传递；
			column="{key1=column1,key2=column2}"
		fetchType="lazy"：表示使用延迟加载；
				- lazy：延迟
				- eager：立即
	 -->
</mapper>