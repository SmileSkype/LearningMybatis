<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--
        jdbc.driver=com.mysql.jdbc.Driver
        jdbc.url=jdbc:mysql://127.0.0.1:3306/learnmybatis
        jdbc.username=root
        jdbc.password=123456
    -->
    <!-- 1.引入外部资源 -->
    <properties resource="db.properties">
    </properties>

    <!--
        2.settings
            setting 用来设置每一个设置项
                name: 设置项名
                value:设置项取值
    -->
    <settings>
        <!-- 驼峰命名 -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- 显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题 -->
        <!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 -->
        <setting name="lazyLoadingEnabled" value="true" />
        <!-- 开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。-->
        <setting name="aggressiveLazyLoading" value="false" />

        <!-- lazyLoadTriggerMethods	指定对象的哪些方法触发一次延迟加载。	用逗号分隔的方法列表。	equals,clone,hashCode,toString -->
        <setting name="lazyLoadTriggerMethods" value=""/>
    </settings>

    <!--
        3、typeAliases：别名处理器：可以为我们的java类型起别名
			别名不区分大小写
    -->
    <typeAliases>
        <!-- 1、typeAlias:为某个java类型起别名
				type:指定要起别名的类型全类名;默认别名就是类名小写；employee
				alias:指定新的别名
				不影响返回数据,但是在xml中可能会提示报错之类的
		 -->
        <!--<typeAlias type="com.smile.skype.learnmybatis.bean.Employee" alias="emp"/>-->
        
        <!-- 2、package:为某个包下的所有类批量起别名
                name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）
        -->

        <!-- 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 -->
        <!--<package name="com.smile.skype.learnmybatis.bean"/>-->
    </typeAliases>

    <!--
        4.environments 环境，mybatis支持配置多种环境信息,default指定默认使用的环境
            transactionMapper: 事务管理器;
                type: 事务管理器的类型
                    JDBC(JdbcTransactionFactory)
                    MANAGED(ManagedTransactionFactory)
                    自定义事务管理器：实现TransactionFactory接口.type指定为全类名
            dataSource：数据源
                type:数据源类型;UNPOOLED(UnpooledDataSourceFactory)
								|POOLED(PooledDataSourceFactory)
								|JNDI(JndiDataSourceFactory)
					自定义数据源：实现DataSourceFactory接口，type是全类名
     -->
    <environments default="dev_mysql">
        <environment id="dev_mysql">
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}" />
                <property name="url" value="${jdbc.url}" />
                <property name="username" value="${jdbc.username}" />
                <property name="password" value="${jdbc.password}" />
            </dataSource>

        </environment>

        <environment id="dev_oracle">
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driver" value="${orcl.driver}" />
                <property name="url" value="${orcl.url}" />
                <property name="username" value="${orcl.username}" />
                <property name="password" value="${orcl.password}" />
            </dataSource>
        </environment>
    </environments>

    <!-- 5、databaseIdProvider：支持多数据库厂商的；
		 type="DB_VENDOR"：VendorDatabaseIdProvider
		 	作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;
		 	MySQL，Oracle，SQL Server,xxxx
	  -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据库厂商起别名 -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>


    <!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 -->
    <!-- 6、mappers：将sql映射注册到全局配置中 -->
    <mappers>
        <!--
			mapper:注册一个sql映射
				注册配置文件
				resource：引用类路径下的sql映射文件
					mybatis/mapper/EmployeeMapper.xml
				url：引用网路路径或者磁盘路径下的sql映射文件
					file:///var/mappers/AuthorMapper.xml

				注册接口
				class：引用（注册）接口，
					1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上;
					推荐：
						比较重要的，复杂的Dao接口我们来写sql映射文件
						不重要，简单的Dao接口为了开发快速可以使用注解；
		-->
        <mapper resource="mysql/EmployeeMapper.xml"/>
        <mapper resource="mysql/EmployeeMapperPlus.xml"/>
        <mapper resource="mysql/DepartmentMapper.xml"/>
        <mapper class="com.smile.skype.learnmybatis.dao.EmployeeMapperAnnotation" />
        <mapper resource="mysql/EmployeeDynamicMapper.xml"/>
        <!-- 批量注册： -->
        <!--<package name="com.smile.skype.learnmybatis.dao"/>-->

    </mappers>

</configuration>